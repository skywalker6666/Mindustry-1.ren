import { Map, Record } from 'immutable';
import { KeyType } from '../types';
import { Config } from './config';
import { Topic } from './topic';
export declare type ExtData = Map<string, any>;
declare type ModelRecordType = {
    topics: Map<KeyType, Topic>;
    extData: ExtData;
    config: Config;
    rootTopicKey: KeyType;
    editorRootTopicKey?: KeyType;
    focusKey?: KeyType;
    focusMode?: string;
    zoomFactor: number;
    formatVersion?: string;
};
declare const Model_base: Record.Factory<ModelRecordType>;
export declare class Model extends Model_base {
    static isModel(obj: any): boolean;
    static create(attrs?: any): Model;
    static createEmpty(): Model;
    static fromJSON(object: any): Model;
    toJS(): {
        rootTopicKey: string;
        topics: any[];
        config: Config;
        extData: Map<string, any>;
        zoomFactor: number;
    };
    readonly extData: Map<string, any>;
    readonly topics: Map<KeyType, Topic>;
    readonly config: Config;
    readonly formatVersion: string;
    readonly rootTopicKey: KeyType;
    readonly editorRootTopicKey: KeyType;
    readonly focusKey: KeyType;
    readonly focusMode: KeyType;
    readonly editingContentKey: KeyType;
    readonly editingDescKey: KeyType;
    getTopic(key: KeyType): Topic;
    getExtDataItem<T>(key: string, c: new () => T): T;
    getParentTopic(key: KeyType): Topic;
    getTopicVisualLevel(key: KeyType): number;
    readonly rootTopic: Topic;
    readonly zoomFactor: number;
}
export {};
//# sourceMappingURL=model.d.ts.map