import { ThemeType } from '../configs/theme/types';
import { DiagramLayoutType, KeyType } from '../types';
import { Model } from './model';
import { Topic } from './topic';
export declare type ModifierArg = BaseModifierArg | SetTopicArg | SetBlockDataArg | SetFocusModeArg | SetTopicStyleArg | SetZoomFactorArg | SetThemeArg | SetLayoutDirArg;
export declare type BaseModifierArg = {
    model: Model;
    topicKey?: KeyType;
};
export declare type SetTopicArg = BaseModifierArg & {
    topic: Topic;
};
export declare type SetBlockDataArg = BaseModifierArg & {
    blockType: string;
    data: any;
    focusMode?: string;
};
export declare type DeleteBlockArg = BaseModifierArg & {
    blockType: string;
};
export declare type SetFocusModeArg = BaseModifierArg & {
    focusMode: string;
};
export declare type SetTopicStyleArg = BaseModifierArg & {
    style: string;
};
export declare type SetZoomFactorArg = BaseModifierArg & {
    zoomFactor: number;
};
export declare type SetThemeArg = BaseModifierArg & {
    theme: ThemeType;
};
export declare type SetLayoutDirArg = BaseModifierArg & {
    layoutDir: DiagramLayoutType;
};
export declare type ModifierResult = Model;
declare function toggleCollapse({ model, topicKey }: BaseModifierArg): ModifierResult;
declare function collapseAll({ model }: BaseModifierArg): ModifierResult;
declare function expandAll({ model }: BaseModifierArg): ModifierResult;
declare function expandTo({ model, topicKey }: BaseModifierArg): ModifierResult;
declare function focusTopic({ model, topicKey, focusMode }: SetFocusModeArg): ModifierResult;
declare function setFocusMode({ model, focusMode }: SetFocusModeArg): ModifierResult;
declare function addChild({ model, topicKey }: BaseModifierArg): ModifierResult;
declare function addSibling({ model, topicKey }: BaseModifierArg): ModifierResult;
declare function deleteTopic({ model, topicKey }: BaseModifierArg): ModifierResult;
/**
 * setBlockData of one topic
 * @param model
 * @param topicKey
 * @param blockType
 * @param focusMode
 * @param data
 */
declare function setBlockData({ model, topicKey, blockType, focusMode, data }: SetBlockDataArg): ModifierResult;
declare function deleteBlock({ model, topicKey, blockType }: DeleteBlockArg): Model;
declare function setStyle({ model, topicKey, style }: SetTopicStyleArg): ModifierResult;
declare function clearAllCustomStyle({ model }: BaseModifierArg): ModifierResult;
declare function setTheme({ model, theme }: SetThemeArg): ModifierResult;
declare function setLayoutDir({ model, layoutDir }: SetLayoutDirArg): ModifierResult;
declare function setEditorRootTopicKey({ model, topicKey }: BaseModifierArg): ModifierResult;
declare function setZoomFactor({ model, zoomFactor }: SetZoomFactorArg): ModifierResult;
declare const _default: {
    addChild: typeof addChild;
    addSibling: typeof addSibling;
    toggleCollapse: typeof toggleCollapse;
    collapseAll: typeof collapseAll;
    expandAll: typeof expandAll;
    expandTo: typeof expandTo;
    focusTopic: typeof focusTopic;
    setFocusMode: typeof setFocusMode;
    deleteTopic: typeof deleteTopic;
    setBlockData: typeof setBlockData;
    deleteBlock: typeof deleteBlock;
    setStyle: typeof setStyle;
    clearAllCustomStyle: typeof clearAllCustomStyle;
    setTheme: typeof setTheme;
    setLayoutDir: typeof setLayoutDir;
    setEditorRootTopicKey: typeof setEditorRootTopicKey;
    setZoomFactor: typeof setZoomFactor;
};
export default _default;
//# sourceMappingURL=modifiers.d.ts.map