import { Model } from './models';
import { ModelChangeCallback, OnChangeFunction } from './types';
export interface IControllerOption {
    plugins?: Array<any>;
    model?: Model;
    readOnly?: boolean;
    onChange?: OnChangeFunction;
}
export interface IControllerRunContext {
    controller: Controller;
    model?: Model;
    topicKey?: KeyType;
    getRef?: Function;
}
export interface IDiagram {
    getDiagramProps(): IDiagramProps;
    openNewModel(newModel: Model): any;
}
export interface IDiagramProps {
    model: Model;
    controller: Controller;
}
export declare class Controller {
    middleware: Map<string, Function[]>;
    private readonly onChange;
    readOnly: boolean;
    currentModel: Model;
    constructor(options?: IControllerOption);
    run(key: string, ...args: any[]): any;
    getValue(propKey: string, arg?: any): any;
    change(model: Model, callback?: ModelChangeCallback): void;
}
//# sourceMappingURL=controller.d.ts.map